# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""

x  = input().split('/')
i = x[0].split('.')

mac = int(x[1])
macb = "1" * mac + "0" * (32 - mac)


#ipb = bin(int(i[0])).split('0b')[1] + bin(int(i[1])).split('0b')[1] + bin(int(i[2])).split('0b')[1] + bin(int(i[3])).split('0b')[1]
ipb = "{0:08b}{1:08b}{2:08b}{3:08b}".format(int(i[0]), int(i[1]), int(i[2]), int(i[3]))

setb = ipb[0:mac] + "0" * (32 - mac)
setip = int(setb[24:32],2)
#print("setb", setb)

print("Network: \n{0:<8}  {1:<8}  {2:<8}  {3:<8}".format(int(setb[0:8],2), int(setb[8:16],2), int(setb[16:24],2), int(setb[24:32],2)))   
print("{0:8}  {1:8}  {2:8}  {3:8}".format(setb[0:8], setb[8:16], setb[16:24], setb[24:32]))
print("Mask: \n/{0}\n{1:<8}  {2:<8}  {3:<8}  {4:<8}".format(mac, int(macb[0:8],2), int(macb[8:16],2), int(macb[16:24],2), int(macb[24:32],2)))
print("{0:8}  {1:8}  {2:8}  {3:8}".format(macb[0:8], macb[8:16], macb[16:24], macb[24:32]))



